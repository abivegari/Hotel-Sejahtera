/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import control.KamarDAOImpl;
import control.ResDetailDAOImpl;
import control.RoomDAOImpl;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import model.Kamar;
import model.ResDetail;
import model.Room;

/**
 *
 * @author user
 */
public class CheckReservasi extends javax.swing.JPanel implements ListSelectionListener {

    ResDetailDAOImpl daoResDetail;
    KamarDAOImpl daoKamar = new KamarDAOImpl();
    RoomDAOImpl daoRoom = new RoomDAOImpl();
    Kamar kx;
    Room rx;
    ResDetail rdx;
    DefaultTableModel dtmKamar;
    DefaultTableModel dtmResDetail;
    List<ResDetail> listRdx;
    String status;
    Integer idRd;
    Integer idRoom;

    public CheckReservasi() {
        initComponents();
        daoResDetail = new ResDetailDAOImpl();
        dtmKamar = (DefaultTableModel) tabelKamar.getModel();
        dtmResDetail = (DefaultTableModel) tabelResDetail.getModel();
        kx = new Kamar();
        rdx = new ResDetail();
        rx = new Room();
        reset();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        DialogKamar = new javax.swing.JDialog();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtTipeKamar = new javax.swing.JTextField();
        txtNoKamar = new javax.swing.JTextField();
        cbStatusKamar = new javax.swing.JComboBox<>();
        btnConfirmKamar = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtNoReservasi = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        btnCheckIn = new javax.swing.JButton();
        btnCheckOut = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelResDetail = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelKamar = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        btnEditKamar = new javax.swing.JButton();

        DialogKamar.setAlwaysOnTop(true);
        DialogKamar.setBackground(new java.awt.Color(153, 153, 255));
        DialogKamar.setMinimumSize(new java.awt.Dimension(250, 200));
        DialogKamar.setResizable(false);

        jPanel5.setBackground(new java.awt.Color(153, 153, 255));

        jLabel2.setText("Tipe Kamar");

        jLabel3.setText("No Kamar");

        jLabel4.setText("Status");

        txtTipeKamar.setEditable(false);

        txtNoKamar.setEditable(false);

        cbStatusKamar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Available", "Unavailable" }));

        btnConfirmKamar.setBackground(new java.awt.Color(51, 255, 51));
        btnConfirmKamar.setText("Confirm");
        btnConfirmKamar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmKamarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                        .addComponent(txtTipeKamar, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnConfirmKamar)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtNoKamar)
                                .addComponent(cbStatusKamar, 0, 131, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtTipeKamar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtNoKamar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cbStatusKamar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btnConfirmKamar)
                .addContainerGap(57, Short.MAX_VALUE))
        );

        DialogKamar.getContentPane().add(jPanel5, java.awt.BorderLayout.CENTER);

        setLayout(new java.awt.BorderLayout());

        jPanel1.setBackground(new java.awt.Color(153, 153, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(507, 250));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel3.setBackground(new java.awt.Color(153, 153, 255));

        jLabel1.setText("No. Reservasi");

        txtNoReservasi.setBackground(new java.awt.Color(255, 255, 0));

        jButton1.setBackground(new java.awt.Color(51, 255, 255));
        jButton1.setText("SEARCH");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnCheckIn.setBackground(new java.awt.Color(51, 255, 51));
        btnCheckIn.setText("Check-in");
        btnCheckIn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCheckIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckInActionPerformed(evt);
            }
        });

        btnCheckOut.setBackground(new java.awt.Color(255, 0, 0));
        btnCheckOut.setText("Check-out");
        btnCheckOut.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtNoReservasi, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 171, Short.MAX_VALUE)
                .addComponent(btnCheckIn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCheckOut))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(txtNoReservasi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnCheckIn)
                        .addComponent(btnCheckOut)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel3, java.awt.BorderLayout.PAGE_START);

        jScrollPane2.setBackground(new java.awt.Color(153, 153, 255));

        tabelResDetail.setBackground(new java.awt.Color(153, 153, 255));
        tabelResDetail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No Order", "Tipe Kamar", "Jumlah Kamar", "Tanggal Check-in", "Tanggal Check-out", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tabelResDetail);

        jPanel1.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        add(jPanel1, java.awt.BorderLayout.PAGE_START);

        jPanel2.setBackground(new java.awt.Color(153, 153, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("List Kamar"));
        jPanel2.setPreferredSize(new java.awt.Dimension(464, 250));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jScrollPane1.setBackground(new java.awt.Color(153, 153, 255));

        tabelKamar.setBackground(new java.awt.Color(153, 153, 255));
        tabelKamar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No. Kamar", "Tipe Kamar", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabelKamar);

        jPanel2.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel4.setBackground(new java.awt.Color(153, 153, 255));
        jPanel4.setPreferredSize(new java.awt.Dimension(629, 30));

        btnEditKamar.setBackground(new java.awt.Color(255, 102, 51));
        btnEditKamar.setText("Edit Kamar");
        btnEditKamar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEditKamar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditKamarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnEditKamar)
                .addContainerGap(536, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(btnEditKamar)
                .addGap(0, 7, Short.MAX_VALUE))
        );

        jPanel2.add(jPanel4, java.awt.BorderLayout.PAGE_START);

        add(jPanel2, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnEditKamarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditKamarActionPerformed
        DialogKamar.setVisible(true);
    }//GEN-LAST:event_btnEditKamarActionPerformed

    private void btnConfirmKamarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmKamarActionPerformed
        kx.setIdKamar(Integer.parseInt(txtNoKamar.getText()));
        kx.setStatus(cbStatusKamar.getSelectedItem().toString());
        daoKamar.updateData(kx);
        DialogKamar.setVisible(false);
        printDataKamar();
    }//GEN-LAST:event_btnConfirmKamarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        dtmResDetail.getDataVector().removeAllElements();
        listRdx = daoResDetail.getDataSearch(Integer.parseInt(txtNoReservasi.getText()));
        printDataRdetail();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnCheckInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckInActionPerformed
        try {
            if (status.length() > 0) {
                JOptionPane.showMessageDialog(this, "Sudah pernah di Check-In", "Warning Message", JOptionPane.WARNING_MESSAGE);
            }
        } catch (NullPointerException npe) {
            status = "CHECKED-IN";
            try {
                int row = tabelResDetail.getSelectedRow();
                if (row > -1) {
                    if (rdx.getStatusReservasi() == "CHECKED-IN") {
                        JOptionPane.showMessageDialog(this, "Sudah pernah di Check-In", "Warning Message", JOptionPane.WARNING_MESSAGE);
                    } else {
                        rdx.setRdId(idRd);
                        rdx.setStatusReservasi(status);
                        daoResDetail.updateData(rdx);
                        printDataRdetail();
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Tidak ada Data yang dipilih", "Warning Message", JOptionPane.WARNING_MESSAGE);
                }
            } catch (Exception e) {

            }
        }

    }//GEN-LAST:event_btnCheckInActionPerformed

    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed
        try {
            if (rdx.getStatusReservasi().equalsIgnoreCase("CHECKED-OUT")) {
                JOptionPane.showMessageDialog(this, "Sudah pernah di Check-Out", "Warning Message", JOptionPane.WARNING_MESSAGE);
            } else {
                if (JOptionPane.showConfirmDialog(this, "Apakah yakin akan men-Check-Out ini?", "Confirmation Check-in", JOptionPane.OK_CANCEL_OPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.OK_OPTION) {
                    status = "CHECKED-OUT";
                    try {
                        int row = tabelResDetail.getSelectedRow();
                        if (row > -1) {
                            rdx.setRdId(idRd);
                            rdx.setStatusReservasi(status);
                            daoResDetail.updateData(rdx);
                            rx.setIdRoom(idRoom);
                            rx.setStockRoom(rx.getStockRoom() + rdx.getQuantity());
                            daoRoom.updateData(rx);
                            printDataRdetail();
                        } else {
                            JOptionPane.showMessageDialog(this, "Tidak ada Data yang dipilih", "Warning Message", JOptionPane.WARNING_MESSAGE);
                        }
                    } catch (Exception e) {

                    }
                }
            }
        }catch (NullPointerException npe) {
            JOptionPane.showMessageDialog(this, "Check-Out harus Check-In terlebih dahulu!", "Warning Message", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnCheckOutActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog DialogKamar;
    private javax.swing.JButton btnCheckIn;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JButton btnConfirmKamar;
    private javax.swing.JButton btnEditKamar;
    private javax.swing.JComboBox<String> cbStatusKamar;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tabelKamar;
    private javax.swing.JTable tabelResDetail;
    private javax.swing.JTextField txtNoKamar;
    private javax.swing.JTextField txtNoReservasi;
    private javax.swing.JTextField txtTipeKamar;
    // End of variables declaration//GEN-END:variables

    public void reset() {
        status = "";
        idRd = 0;
        idRoom = -1;
        txtNoReservasi.setText("");
        txtNoKamar.setText("");
        txtTipeKamar.setText("");
        printDataKamar();
        dtmResDetail.getDataVector().removeAllElements();
    }

    private void printDataKamar() {
        tabelKamar.getSelectionModel().removeListSelectionListener(this);
        dtmKamar.getDataVector().removeAllElements();
        if (daoKamar.getAllData().isEmpty()) {
            dtmKamar.addRow(new Object[10]);
        } else {
            for (Kamar kxx : daoKamar.getAllData()) {
                dtmKamar.addRow(new Object[]{
                    kxx.getIdRoom().getJenisRoom(),
                    kxx.getIdKamar(),
                    kxx.getStatus()
                });
            }
        }
        tabelKamar.getSelectionModel().addListSelectionListener(this);
    }

    private void printDataRdetail() {
        tabelResDetail.getSelectionModel().removeListSelectionListener(this);
        dtmResDetail.getDataVector().removeAllElements();
        System.out.println(listRdx.size());
        if (listRdx == null) {
            dtmResDetail.addRow(new Object[6]);
        } else {
            for (ResDetail rdt : daoResDetail.getDataSearch(Integer.parseInt(txtNoReservasi.getText()))) {
                dtmResDetail.addRow(new Object[]{
                    rdt.getRdId(),
                    rdt.getIdRoom().getJenisRoom(),
                    rdt.getQuantity(),
                    rdt.getTanggalCheckIn(),
                    rdt.getTanggalCheckOut(),
                    rdt.getStatusReservasi()});
            }
        }
        tabelResDetail.getSelectionModel().addListSelectionListener(this);
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        if (e.getSource() == tabelKamar.getSelectionModel()) {
            try {
                kx = new Kamar(Integer.parseInt(tabelKamar.getValueAt(tabelKamar.getSelectedRow(), 1).toString()));
                kx = daoKamar.getData(kx.getIdKamar());
                txtNoKamar.setText(kx.getIdKamar().toString());
                txtTipeKamar.setText(kx.getIdRoom().getJenisRoom());
                cbStatusKamar.setSelectedItem(kx.getStatus());
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        } else if (e.getSource() == tabelResDetail.getSelectionModel()) {
            try {
                rdx = new ResDetail(Integer.parseInt(tabelResDetail.getValueAt(tabelResDetail.getSelectedRow(), 0).toString()));
                rdx = daoResDetail.getData(rdx.getRdId());
                rx = daoRoom.getData(rdx.getIdRoom().getIdRoom());
                idRd = rdx.getRdId();
                idRoom = rx.getIdRoom();
                status = rdx.getStatusReservasi();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }
}
